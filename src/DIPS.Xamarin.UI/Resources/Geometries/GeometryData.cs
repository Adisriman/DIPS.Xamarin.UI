using System;
using System.Collections.Generic;
using System.Text;
using DIPS.Xamarin.UI.Extensions.Markup;
using Xamarin.Forms;

namespace DIPS.Xamarin.UI.Resources.Geometries
{
    public static class GeometryData
    {
        #region shape data
        public static string AccessInformation = "M154.82142,376.00474L145.82142,380.00474 145.82142,386.00474C145.82142,391.55474 149.66142,396.74474 154.82142,398.00474 159.98142,396.74474 163.82142,391.55474 163.82142,386.00474L163.82142,380.00474 154.82142,376.00474z M153.5304,379.92662L156.18665,379.92662 156.18665,382.58482 153.5304,382.58482 153.5304,379.92662z M153.5304,385.24107L156.18665,385.24107 156.18665,393.20982 153.5304,393.20982 153.5304,385.24107z";

        public static string AccessReason => "M100.56445,386.5L91.564453,390.5 91.564453,396.5C91.564453,402.05 95.404454,407.24 100.56445,408.5 100.76116,408.452 100.95179,408.38738 101.14453,408.32812 100.16124,407.54111 99.291411,406.62213 98.544922,405.60547 95.720475,403.8455 93.564453,400.23785 93.564453,396.7207L93.564453,391.80078 100.56445,388.67969 107.56445,391.80078 107.56445,393.54688C108.21688,393.43194,108.8846,393.36479,109.56445,393.3418L109.56445,390.5 100.56445,386.5z M109.92578,396.10156C105.40899,396.10156 101.55305,398.9112 99.990234,402.87695 101.55305,406.84269 105.40899,409.65234 109.92578,409.65234 114.44257,409.65234 118.30047,406.84269 119.86328,402.87695 118.30047,398.9112 114.44257,396.10156 109.92578,396.10156z M109.92578,398.35938A4.5167911,4.5167911,0,0,1,114.44336,402.87695A4.5167911,4.5167911,0,0,1,109.92578,407.39453A4.5167911,4.5167911,0,0,1,105.41016,402.87695A4.5167911,4.5167911,0,0,1,109.92578,398.35938z M109.92578,400.16602A2.7100747,2.7100747,0,0,0,107.2168,402.87695A2.7100747,2.7100747,0,0,0,109.92578,405.58789A2.7100747,2.7100747,0,0,0,112.63672,402.87695A2.7100747,2.7100747,0,0,0,109.92578,400.16602z";
        public static string Alert => "M502,580.40625C500.128,580.40625 498.57325,581.03325 497.40625,582.28125 496.25725,583.51025 495.6875,585.2085 495.6875,587.3125 495.6875,588.6685 495.77175,590.90675 495.96875,593.96875L497.03125,609.6875C497.24125,611.8665 497.57575,613.47475 498.09375,614.59375 498.74375,616.00175 499.95975,616.75 501.59375,616.75 503.19275,616.75 504.425,615.9885 505.125,614.5625 505.694,613.3985 506.05475,611.824 506.21875,609.75L507.59375,593.625C507.74875,592.116 507.84375,590.604 507.84375,589.125 507.84375,586.482 507.49825,584.471 506.78125,583 506.20525,581.819 504.912,580.40625 502,580.40625z M501.71875,620.1875C500.03575,620.1875 498.6035,620.7745 497.4375,621.9375 496.2705,623.1035 495.6875,624.5295 495.6875,626.1875 495.6875,628.0765 496.3135,629.6045 497.5625,630.6875 498.7635,631.7325 500.17325,632.25 501.78125,632.25 503.37125,632.25 504.807,631.71725 506,630.65625 507.229,629.56125 507.84375,628.0515 507.84375,626.1875 507.84375,624.5235 507.22725,623.1055 506.03125,621.9375 504.84525,620.7795 503.39375,620.1875 501.71875,620.1875z";

        public static string Ambulance => "M18,18.5A1.5,1.5,0,0,0,19.5,17A1.5,1.5,0,0,0,18,15.5A1.5,1.5,0,0,0,16.5,17A1.5,1.5,0,0,0,18,18.5 M19.5,9.5L17,9.5 17,12 21.46,12 19.5,9.5 M6,18.5A1.5,1.5,0,0,0,7.5,17A1.5,1.5,0,0,0,6,15.5A1.5,1.5,0,0,0,4.5,17A1.5,1.5,0,0,0,6,18.5 M20,8L23,12 23,17 21,17A3,3,0,0,1,18,20A3,3,0,0,1,15,17L9,17A3,3,0,0,1,6,20A3,3,0,0,1,3,17L1,17 1,6C1,4.89,1.89,4,3,4L17,4 17,8 20,8 M8,6L8,9 5,9 5,11 8,11 8,14 10,14 10,11 13,11 13,9 10,9 10,6 8,6z";

        public static string Approve => "M23.7501,33.25L34.8334,44.3333 52.2499,22.1668 56.9999,26.9168 34.8334,53.8333 19.0001,38 23.7501,33.25z";

        public static string ApproveAndClose => "M440.53125,377.90625L423.125,400.0625 412.03125,389 407.28125,393.75 423.125,409.5625 429.33453,401.63422 426.03812,398.3378 431.9302,392.29393 435.1418,395.4207 445.28125,382.65625z M432.27613,396.58946L437.25317,401.56649 442.23019,396.58951 444.36322,398.72252 439.38618,403.69951 444.36322,408.67658 442.23024,410.80961 437.25317,405.83252 432.27613,410.80961 430.14312,408.67654 435.12019,403.69951 430.14316,398.72247z";

        public static string Archive => "M3,3L21,3 21,7 3,7 3,3 M4,8L20,8 20,21 4,21 4,8 M9.5,11A0.5,0.5,0,0,0,9,11.5L9,13 15,13 15,11.5A0.5,0.5,0,0,0,14.5,11L9.5,11z";
        public static string Heart => "M12,21.35L10.55,20.03C5.4,15.36 2,12.27 2,8.5 2,5.41 4.42,3 7.5,3 9.24,3 10.91,3.81 12,5.08 13.09,3.81 14.76,3 16.5,3 19.58,3 22,5.41 22,8.5 22,12.27 18.6,15.36 13.45,20.03L12,21.35z";


        #endregion shape data

        #region mapper from identifier to shape data
        public static PathGeometry FromIdentifier(this Identifier identifier)
        {
            var data = string.Empty;

            data =  identifier switch
            {
                Identifier.AccessInformation => AccessInformation,
                Identifier.AccessReason => AccessReason,
                Identifier.Alert => Alert,
                Identifier.Ambulance => Ambulance,
                Identifier.ApproveAndClose => ApproveAndClose,
                Identifier.Archive => Archive,
                Identifier.Heart => Heart,
                _ => throw new NotImplementedException($"The{nameof(Identifier)} you are trying to use is not yet mapped to a gemetry data"),
            };

            return (PathGeometry)new PathGeometryConverter().ConvertFromInvariantString(data);
        }

        # endregion mapper from identifier to shape data

        #region identifiers

        public enum Identifier
        {
            AccessInformation,
            AccessReason,
            Alert,
            Ambulance,
            ApproveAndClose,
            Archive,
            Heart
        }

        #endregion identifiers

    }
}
